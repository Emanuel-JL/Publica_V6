package com.dev.publica_in_out;

/**
 * This class was automatically generated by the data modeler tool.
 */

import java.sql.*;
import java.util.*;
import javax.naming.*;
import javax.sql.*;
import org.json.JSONObject;
import org.json.JSONArray;
import org.jbpm.document.Document;
import org.jbpm.document.DocumentCollection;
import org.kie.api.task.TaskEvent;
import org.kie.api.task.TaskLifeCycleEventListener;



public class RegistroTareaListener implements TaskLifeCycleEventListener {
    
    private static final String API_URL = "http://172.27.23.81:8082/documentos";

    @Override
    public void beforeTaskActivatedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskClaimedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskSkippedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskStartedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskStoppedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskCompletedEvent(TaskEvent event) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
    
        try {
            InitialContext ctx = new InitialContext();
            DataSource ds = (DataSource) ctx.lookup("java:/jboss/datasources/jbpmDS");
            conn = ds.getConnection();
    
            if (conn != null && !conn.isClosed()) {
    
                long processInstanceId = event.getTask().getTaskData().getProcessInstanceId();
                long taskId = event.getTask().getId();
                String taskName = event.getTask().getName();
    
                if (taskName != null && taskName.startsWith("Firma")) {
                    String sql = "SELECT 1 FROM productivo.firmasdigitales WHERE processinstanceid = ? AND taskid = ?";
                    pstmt = conn.prepareStatement(sql);
                    pstmt.setString(1, String.valueOf(processInstanceId));
                    pstmt.setString(2, String.valueOf(taskId));
                    rs = pstmt.executeQuery();
    
                    if (!rs.next()) {
                        String msg = "Debe firmar el documento antes de completar esta tarea.";
                        System.out.println(msg);
                        throw new RuntimeException(msg);
                    }
                }
            }
    
        } catch (NamingException | SQLException e) {
            throw new RuntimeException("Error al verificar firma: " + e.getMessage(), e);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null && !conn.isClosed()) conn.close();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
            }
        }
    }

    @Override
    public void beforeTaskFailedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskAddedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskExitedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskReleasedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskResumedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskSuspendedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskForwardedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskDelegatedEvent(TaskEvent event) { }
    @Override
    public void beforeTaskNominatedEvent(TaskEvent event) { }
    @Override
    public void afterTaskActivatedEvent(TaskEvent event) { }
    @Override
    public void afterTaskClaimedEvent(TaskEvent event) { }
    @Override
    public void afterTaskSkippedEvent(TaskEvent event) { }
    @Override
    public void afterTaskStartedEvent(TaskEvent event)  { }
    @Override
    public void afterTaskStoppedEvent(TaskEvent event) { }
    
    @Override
    public void afterTaskCompletedEvent(TaskEvent e) {
        try {
            List<String> documentosIds = new ArrayList<>();
            Map<String, Object> vars = e.getTask().getTaskData().getTaskOutputVariables();
    
            vars.forEach((k, v) -> {
                if (v instanceof Document) {
                    Document d = (Document) v;
                    documentosIds.add(d.getIdentifier());
                } else if (v instanceof DocumentCollection) {
                    DocumentCollection coll = (DocumentCollection) v;
                    coll.getDocuments().forEach(doc -> {
                        Document d = (Document) doc;
                        documentosIds.add(d.getIdentifier());
                    });
                }
            });
    
            if (!documentosIds.isEmpty()) {
                enviarIds(documentosIds);
            }
    
           
    
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
            ex.printStackTrace();
        }
    }





    
    private void enviarIds(List<String> uuids) {
        try {
            JSONArray jsonArray = new JSONArray();
            uuids.forEach(jsonArray::put);
            JSONObject payload = new JSONObject().put("documentIds", jsonArray);
    
            PeticionHTTP.ejecuta(API_URL, payload)
                .whenComplete((resp, err) -> {
                    if (err != null) err.printStackTrace();
                    else System.out.println(resp);
                });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }



    @Override
    public void afterTaskFailedEvent(TaskEvent event) { }
    @Override
    public void afterTaskAddedEvent(TaskEvent event) { }
    @Override
    public void afterTaskExitedEvent(TaskEvent event) { }
    @Override
    public void afterTaskReleasedEvent(TaskEvent event) { }
    @Override
    public void afterTaskResumedEvent(TaskEvent event) { }
    @Override
    public void afterTaskSuspendedEvent(TaskEvent event) { }
    @Override
    public void afterTaskForwardedEvent(TaskEvent event) { }
    @Override
    public void afterTaskDelegatedEvent(TaskEvent event) { }
    @Override
    public void afterTaskNominatedEvent(TaskEvent event) { }
}